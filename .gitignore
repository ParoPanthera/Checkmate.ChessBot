import chess
import random
from abc import ABC, abstractmethod

# Piece values for scoring
piece_values = {
    chess.PAWN: 1, chess.KNIGHT: 3, chess.BISHOP: 3,
    chess.ROOK: 5, chess.QUEEN: 9, chess.KING: 0  # King has no value as game ends
}

# Extra bonus points
attack_bonus = 2  # Points for attacking an opponent piece
defense_bonus = 1  # Points for protecting own piece


class ChessBotClass(ABC):
    @abstractmethod
    def __call__(self, board_fen: str) -> chess.Move:
        pass


class ChessBot(ChessBotClass):
    def __call__(self, board_fen: str) -> chess.Move:
        board = chess.Board(board_fen)
        best_move = None
        best_score = float('-inf')

        for move in board.legal_moves:
            board.push(move)
            score = self.evaluate_position(board, move)
            if score > best_score:
                best_score = score
                best_move = move
            board.pop()

        return best_move if best_move else random.choice(list(board.legal_moves))

    def evaluate_position(self, board, move):
        score = 0
        captured_piece = board.piece_at(move.to_square)

        if captured_piece:
            score += piece_values.get(captured_piece.piece_type, 0) + attack_bonus

        if any(board.attacks(move.to_square)):
            score += defense_bonus

        return score

